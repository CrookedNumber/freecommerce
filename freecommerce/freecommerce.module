<?php
// $Id$
/**
 * @file
 * A simple cart and ordering system for FREE products (and only FREE products).
 */

/**
 * Implementation of hook_menu ().
 */
function freecommerce_menu() {

  $items['cart'] = array(
    'title' => 'Your cart',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('freecommerce_cart'),
    'access arguments' => array('access freecommerce pages'),
  );

  $items['cart/%node'] = array(
    'title' => 'Your cart',
    'page callback' => 'freecommerce_cart_add',
    'page arguments' => array(1),
    'access arguments' => array('access freecommerce pages'),
  );
    
  $items['checkout'] = array(
    'title' => 'Checkout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('freecommerce_checkout'),
    'access arguments' => array('access freecommerce pages'),
  );
    
  $items['admin/settings/freecommerce'] = array(
    'title' => 'Free-commerce settings',
    'description' => 'Change basic free-commerce settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('freecommerce_admin_settings'),
    'access arguments' => array('administer freecommerce settings'),
  );
  return $items;
}

/**
 * Implementation of hook_perm(). 
 */
function freecommerce_perm() {
  return array('administer freecommerce settings', 'access freecommerce pages');
}

/**
 * Define the settings form. 
 */
function freecommerce_admin_settings(&$form_state, $edit = array()) {
  $form['orderform'] = array(
    '#type' => 'fieldset',
    '#title' => t('Order Form'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE, 
  );
  
  $form['orderform']['freecommerce_address_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Order form fields'),
    '#default_value' => variable_get('freecommerce_address_fields', array('first_name', 'last_name', 'address1', 'city', 'state', 'zip', 'country', 'email')),
    '#options' => freecommerce_grab_address_fields(),
  );
  
  $form['content_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content types'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE, 
  );
  
  $form['content_types']['freecommerce_nodes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('The following nodes can be ordered via Freecommerce'),
    '#default_value' => array_filter(variable_get('freecommerce_nodes', array())),
    '#options' => array_map('check_plain', node_get_types('names')),
    '#description' => t('Select content types to categorize using this vocabulary.'),
  );
  
  $form['contacts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contacts'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE, 
  );
  
  
  if (module_exists('email')) {
    $form['contacts']['freecommerce_add_cck_email'] = array(
      '#type' => 'checkbox',
      '#title' => t('Contact all node emails?'),
      '#description' => t('If checked, any email field (using the CCK email module) attached to a node in the order will be contacted about the order.'),
      '#default_value' => variable_get('freecommerce_add_cck_email', 0),
    );
    if (module_exists('nodereference')) {
      $form['contacts']['freecommerce_add_nodereference_email'] = array(
        '#type' => 'checkbox',
        '#title' => t('Contact all nodereference emails?'),
        '#description' => t('If checked, any email field indirectly attached to a node in the order (via the CCK nodereference module) will be contacted about the order. USE WITH CAUTION!'),
        '#default_value' => variable_get('freecommerce_add_nodereference_email', 0),
      );                                 
    }
  }
  
  $form['contacts']['freecommerce_contacts_misc'] = array(
    '#type' => 'textarea',
    '#title' => t('E-mail the following'),
    '#default_value' => variable_get('freecommerce_contacts_misc', ''),
    '#description' => t('Info on every order will be sent to these e-mail addresses (if valid). One address per line.'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return system_settings_form($form); 
}


function freecommerce_cart() {
  if (count($_SESSION['freecommerce_cart']) >= 1) {
    require 'freecommerce_fields.inc.php';
    $fields = variable_get('freecommerce_address_fields', array('email'));
    // create containers for product (i.e., node title), quantity, and remove
    // so we can have nested values for the _submit handler
    $form['remove'] = array(
      '#tree' => TRUE,
    );
    $form['quantity'] = array(
      '#tree' => TRUE,
    );
    $form['product'] = array(
      '#tree' => TRUE,
    );
    
    $ok_nodes = variable_get('freecommerce_nodes', array());
    foreach ($_SESSION['freecommerce_cart'] as $id => $product) {
      $node = node_load($id);
      if (node_access('view', $node) && $ok_nodes[$node->type]) { // double-check that node is still free-commercized
        $form['product'][$node->nid] = array(
          '#value' => check_plain($product['title']),
        );
        $form['quantity'][$node->nid] = array(
          '#type' => 'textfield',
          '#size' => 1,
          '#maxlength' => 3, 
          '#default_value' => $product['quantity'],
        );
        $form['remove'][$node->nid] = array(
          '#type' => 'checkbox',
          '#return_value' => 1,
          '#default_value' => 0,
        );
      }
      else { // if not a legit node, remove it from session and, thus, the cart
        unset($_SESSION['freecommerce_cart'][$id]);
      }
    }
  }

  $form['checkout'] = array(
    '#type' => 'submit',
    '#value' => t('Go to Checkout'),
  );

  $form['update'] = array(
    '#type' => 'submit',
    '#value' => t('Update order'),
  );
  return $form;
}

function freecommerce_cart_add($node) {
  $ok_nodes = variable_get('freecommerce_nodes', array());
  if (node_access('view', $node) && $ok_nodes[$node->type]) {
    // product added to cart (or one more of existing quantity)
    freecommerce_add_to_cart($node);
  }
  // goto cart page -- without $nid argument
  drupal_goto('cart');
}

function freecommerce_add_to_cart($node) {
  if (isset($_SESSION['freecommerce_cart'][$node->nid])) {
    $_SESSION['freecommerce_cart'][$node->nid]['quantity']++;
  }
  else {
    $_SESSION['freecommerce_cart'][$node->nid] = array(
      'title' => $node->title,
      'quantity' => 1,
    );
  }
}

/**
 * Implementation of hook_theme(). 
 */
function freecommerce_theme($existing, $type, $theme, $path) {
    return array(
    'freecommerce_cart' => array(
      'arguments' => array('form'),
    ),
  );

} 
 
function theme_freecommerce_cart(&$form) {
  drupal_add_css(drupal_get_path('module', 'freecommerce') .'/freecommerce_cart.css');
  foreach ($_SESSION['freecommerce_cart'] as $key => $product) {
    $row = array(
      drupal_render($form['product'][$key]),
      drupal_render($form['quantity'][$key]),
      t('Free'),
      drupal_render($form['remove'][$key]),
    );
    $rows[] = $row;
  }

  if (!empty($rows)) {
    $header = array(
      array(
        data => t('Product'),
      ),
      array(
        data => t('Quantity'),
      ),
      array(
        data => t('Price'),
      ),
      array(
        data => t('Remove'),
      ),
    );
    $rows[] = array(
      array(
        'data' => drupal_render($form['checkout']),
      ),
      array(
        'data' => '&nbsp;'
      ),
      array(
        'data' => drupal_render($form['update']),
        'colspan' => 2,
      ),
    );
    $attrs = array('class' => 'freecommerce-table');
    $output = theme('table', $header, $rows, $attrs);
    $output .= drupal_render($form);  
    return $output;
  }
  else {
    return t('You have nothing in your cart.');
  }
}

function freecommerce_cart_submit($form, &$form_state) {
  // process quantity / remove requests
  // regardless of which submit button has been pressed
  // this SEEMS like decent UX
  foreach ($form_state['values']['quantity'] as $key => $value) {
    if ($value) {
      $_SESSION['freecommerce_cart'][$key]['quantity'] = $value;
    }
  }
  foreach ($form_state['values']['remove'] as $key => $value) {
    if ($value) {
      unset($_SESSION['freecommerce_cart'][$key]);
    }
  }   
  
  if ($form_state['values']['op'] == t('Update order')) {
    $form_state['redirect'] = 'cart';
  }
  else {
    $form_state['redirect'] = 'checkout';
  }
}

function freecommerce_checkout() {
  // See if user wants to Return to Cart
  if ($_POST['op'] == t('Return to Cart')) {
    drupal_goto('cart');
  }
  $table = freecommerce_product_table();

  if (!$table) {
    drupal_goto('cart');
  }
  
  drupal_add_css(drupal_get_path('module', 'freecommerce') .'/freecommerce_cart.css');
  
  $form['product_table'] = array(
    '#value' => $table,
  );
  $form['return_cart'] = array(
    '#type' => 'submit',
    '#value' => t('Return to Cart'),
    '#submit' => FALSE,
  );
  require 'freecommerce_fields.inc.php';
  $fields = variable_get('freecommerce_address_fields', array('email'));
  foreach ($freecommerce_fields as $name => $field) {
    if (in_array($name, $fields)) {
      $form[$name] = $field;
      $form[$name]['#required'] = TRUE;
    }
  }  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit order'),
    '#weight' => 10,
  ); 
  return $form;
}  

function freecommerce_checkout_validate($form, &$form_state) {
  $email = $form_state['values']['email'];
  if ($email && !valid_email_address($email)) {
    form_set_error('email', t('Please input a valid email address.'));
  }
}

function freecommerce_checkout_submit($form, &$form_state) {
  $cart = $_SESSION['freecommerce_cart'];
  if ($cart) {
    // generate customer info
    $info = t('CUSTOMER INFORMATION') . "\n";
    $info .= '----------------------' . "\n";
    $ok_fields = variable_get('freecommerce_address_fields', array());
    foreach ($form_state['values'] as $k => $v) {
      if (in_array($k, $ok_fields)) {
        $customer_info .= $k . ': ' . $v . "\n";
      }
    }
    
    // generate standard recipient info
    $emails = array();
    $misc = variable_get('freecommerce_contacts_misc', '');
    
    if ($misc) {
      $emails = array_merge($emails, preg_split("/\s+/", $misc));
    }
    
    foreach ($cart as $id => $product) {
      $node = node_load($id);
      
      if (variable_get('freecommerce_add_cck_email', 0) && module_exists('email')) {
        $emails = array_merge($emails, freecommerce_grab_emails($node));
      }
      
      if (variable_get('freecommerce_add_nodereference_email', 0) && module_exists('email') && module_exists('nodereference')) {
        $emails = array_merge($emails, freecommerce_grab_nodereference_emails($node));
      }
      $to = implode(', ', $emails);
      
      global $language;
      drupal_mail('freecommerce', 'order', $to, $language->language, array('title' => $product['title'], 'quantity' => $product['quantity'], 'customer_info' => $customer_info));
    }
  }
  else {
    $msg = t('Nothing in cart');
  }
}

function freecommerce_grab_emails($node) {
  $emails = array();
  foreach ($node as $index=>$field) {
    if (strpos($index, 'field_') === 0) { // saves time, we think
      $info = content_fields($index, $node->type);
      if ($info['type'] == 'email') {
        foreach ($field as $value) {
          if ($value['email']) {
            $emails[] = $value['email'];
          }
        } 
      }
    }   
  }
  return $emails;
}

function freecommerce_grab_nodereference_emails($node) {
  $emails = array();
  foreach ($node as $index => $field) {
    if (strpos($index, 'field_') === 0) { // saves time, we think
      $info = content_fields($index, $node->type);
      if ($info['type'] == 'nodereference') {
        foreach ($field as $value) { 
          if ($value['nid']) {
            $emails = array_merge($emails, freecommerce_grab_emails(node_load($value['nid'])));
          } 
        }
      }   
    } 
  }
  return $emails;
}

/**
 * Implementation of hook_mail(). 
 */  
function freecommerce_mail($key, &$message, $params) {
  if ($key == 'order') {
    $message['subject'] = t('ORDER: ') . $params['title'];
    $body =  t('ORDER INFORMATION') . "\n";
    $body .= '---------------------' . "\n";
    $body .= t('PRODUCT: ') . $params['title'] . "\n";
    $body .= t('QUANTITY: ') . $params['quantity'] . "\n";
    $body .= t('ORDER DATE: ') . format_date(time()) . "\n";
    $body .= $params['customer_info'];
    $message['body'][] = $body;
  }
}

function freecommerce_product_table() {
  $ok_nodes = variable_get('freecommerce_nodes', array());
  foreach ($_SESSION['freecommerce_cart'] as $id => $product) {
    $node = node_load($id);
    if (node_access('view', $node) && $ok_nodes[$node->type]) { // double-check that node is still free-commercized
      $row = array(
        check_plain($product['title']),
        $product['quantity'],
        t('Free'),
      );
      $rows[] = $row;
    }
  }
  if (empty($rows)) {
    return '';
  }
  
  $header = array(
    array(
      data => t('Product'),
    ),
    array(
      data => t('Quantity'),
    ),
    array(
      data => t('Price'),
    ),
  );
  $attrs = array('class' => 'freecommerce-table');
  return theme('table', $header, $rows, $attrs);
}

function freecommerce_grab_address_fields() {
  require 'freecommerce_fields.inc.php';
  foreach ($freecommerce_fields as $name => $field) {
    $options[$name] = $field['#title'];
  }
  return $options;
}